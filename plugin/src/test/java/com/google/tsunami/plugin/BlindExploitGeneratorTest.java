/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.tsunami.plugin;

import static com.google.common.net.HttpHeaders.CONTENT_TYPE;
import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import com.google.common.net.MediaType;
import com.google.inject.AbstractModule;
import com.google.inject.Guice;
import com.google.protobuf.util.JsonFormat;
import com.google.tsunami.callbackserver.proto.PollingResult;
import com.google.tsunami.common.net.http.HttpClientModule;
import com.google.tsunami.common.net.http.HttpStatus;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

/** Tests for {@link BlindExploitGenerator}. */
@RunWith(JUnit4.class)
public final class BlindExploitGeneratorTest {
  private static final String IP_PATTERN_STRING = "^http://127\\.0\\.0\\.1/[a-fA-F0-9]{56}$";
  private static final Pattern IP_PAYLOAD_PATTERN = Pattern.compile(IP_PATTERN_STRING);
  private static final String DOMAIM_PATTERN_STRING = "^[a-fA-F0-9]{56}\\.tcs\\.com$";
  private static final Pattern DOMAIN_PAYLOAD_PATTERN = Pattern.compile(DOMAIM_PATTERN_STRING);
  private final TcsConfigProperties configProperties = new TcsConfigProperties();

  private MockWebServer mockWebServer;
  private BlindExploitGenerator blindExploitGenerator;

  @Before
  public void setUp() throws IOException {
    mockWebServer = new MockWebServer();
    mockWebServer.start();
  }

  @After
  public void tearDown() throws IOException {
    mockWebServer.shutdown();
  }

  @Test
  public void getPayload_whenIpPayloadConfiged_returnsIpPaylodWithCbid() {
    configProperties.callbackAddress = "127.0.0.1";
    configProperties.callbackPort = 80;
    configProperties.pollingUri = "http://127.0.0.1/";
    blindExploitGenerator =
        Guice.createInjector(getTestingGuiceModuleWithConfigs())
            .getInstance(BlindExploitGenerator.class);

    String payload = blindExploitGenerator.generatePayload();

    Matcher payloadMatcher = IP_PAYLOAD_PATTERN.matcher(payload);
    assertWithMessage(payload + " is expected to be in the following pattern " + IP_PATTERN_STRING)
        .that(payloadMatcher.find())
        .isTrue();
  }

  @Test
  public void getPayload_whenDoaminPayloadConfiged_returnsIpPaylodWithCbid() {
    configProperties.callbackAddress = "tcs.com";
    configProperties.callbackPort = 80;
    configProperties.pollingUri = "http://127.0.0.1/";
    blindExploitGenerator =
        Guice.createInjector(getTestingGuiceModuleWithConfigs())
            .getInstance(BlindExploitGenerator.class);

    String payload = blindExploitGenerator.generatePayload();

    Matcher payloadMatcher = DOMAIN_PAYLOAD_PATTERN.matcher(payload);
    assertWithMessage(
            payload + " is expected to be in the following pattern " + DOMAIM_PATTERN_STRING)
        .that(payloadMatcher.find())
        .isTrue();
  }

  @Test
  public void getPayload_whenTcsConfigNotSet_returnsEmptyUrl() {
    blindExploitGenerator =
        Guice.createInjector(getTestingGuiceModuleWithConfigs())
            .getInstance(BlindExploitGenerator.class);

    String payload = blindExploitGenerator.generatePayload();
    assertThat(payload).isEmpty();
  }

  @Test
  public void isVulnerable_whenRequestFailed_returnsFalse() {
    configProperties.callbackAddress = "tcs.com";
    configProperties.callbackPort = 80;
    configProperties.pollingUri = "http://INVALID.com";
    blindExploitGenerator =
        Guice.createInjector(getTestingGuiceModuleWithConfigs())
            .getInstance(BlindExploitGenerator.class);

    assertThat(blindExploitGenerator.isVulnerable()).isFalse();
  }

  @Test
  public void isVulnerable_whenResponseWith404_returnsFalse() {
    mockWebServer.enqueue(
        new MockResponse()
            .setResponseCode(HttpStatus.NOT_FOUND.code())
            .setHeader(CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8.toString()));
    configProperties.callbackAddress = "tcs.com";
    configProperties.callbackPort = 80;
    configProperties.pollingUri = mockWebServer.url("/").toString();
    blindExploitGenerator =
        Guice.createInjector(getTestingGuiceModuleWithConfigs())
            .getInstance(BlindExploitGenerator.class);

    assertThat(blindExploitGenerator.isVulnerable()).isFalse();
  }

  @Test
  public void isVulnerable_whenTcsConfigNotSet_returnsFalse() {
    blindExploitGenerator =
        Guice.createInjector(getTestingGuiceModuleWithConfigs())
            .getInstance(BlindExploitGenerator.class);

    assertThat(blindExploitGenerator.isVulnerable()).isFalse();
  }

  @Test
  public void isVulnerable_whenHttpLogFetched_returnsTrue() throws IOException {
    PollingResult log = PollingResult.newBuilder().setHasHttpInteraction(true).build();
    String body = JsonFormat.printer().preservingProtoFieldNames().print(log);
    mockWebServer.enqueue(
        new MockResponse()
            .setResponseCode(HttpStatus.OK.code())
            .setHeader(CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8.toString())
            .setBody(body));
    configProperties.callbackAddress = "tcs.com";
    configProperties.callbackPort = 80;
    configProperties.pollingUri = mockWebServer.url("/").toString();
    blindExploitGenerator =
        Guice.createInjector(getTestingGuiceModuleWithConfigs())
            .getInstance(BlindExploitGenerator.class);

    assertThat(blindExploitGenerator.isVulnerable()).isTrue();
  }

  @Test
  public void isVulnerable_whenDnsLogFetched_returnsTrue() throws IOException {
    PollingResult log = PollingResult.newBuilder().setHasDnsInteraction(true).build();
    String body = JsonFormat.printer().preservingProtoFieldNames().print(log);
    mockWebServer.enqueue(
        new MockResponse()
            .setResponseCode(HttpStatus.OK.code())
            .setHeader(CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8.toString())
            .setBody(body));
    configProperties.callbackAddress = "tcs.com";
    configProperties.callbackPort = 80;
    configProperties.pollingUri = mockWebServer.url("/").toString();
    blindExploitGenerator =
        Guice.createInjector(getTestingGuiceModuleWithConfigs())
            .getInstance(BlindExploitGenerator.class);

    assertThat(blindExploitGenerator.isVulnerable()).isTrue();
  }

  private AbstractModule getTestingGuiceModuleWithConfigs() {
    return new AbstractModule() {
      @Override
      protected void configure() {
        install(new HttpClientModule.Builder().build());
        install(
            new BlindExploitGeneratorModule());
        bind(TcsConfigProperties.class).toInstance(configProperties);
      }
    };
  }
}
