/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugin;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

import com.google.common.net.InetAddresses;
import com.google.common.net.InternetDomainName;
import com.google.inject.AbstractModule;
import com.google.inject.Provides;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.plugin.payload.PayloadSecretGenerator;
import java.security.SecureRandom;

/** Guice module for installing {@link BlindExploitGenerator}. */
public final class BlindExploitGeneratorModule extends AbstractModule {

  @Provides
  TcsClient provideTcsClient(HttpClient httpClient, TcsConfigProperties configs) {
    // when all tcs config are not set, we provides a default (invalid) TcsClient
    if (configs.callbackAddress == null
        && configs.callbackPort == null
        && configs.pollingUri == null) {
      return new TcsClient("", 80, "http://invalid.com", checkNotNull(httpClient));
    }
    checkArgument(
        InetAddresses.isInetAddress(configs.callbackAddress)
            || InternetDomainName.isValid(configs.callbackAddress),
        "Invalid callback address specified");
    checkArgument(
        configs.callbackPort > 0 && configs.callbackPort < 65536, "Invalid port number specified");
    checkNotNull(configs.pollingUri);

    return new TcsClient(
        configs.callbackAddress,
        configs.callbackPort,
        configs.pollingUri,
        checkNotNull(httpClient));
  }

  @Provides
  PayloadSecretGenerator provideSecretGenerator() {
    return new PayloadSecretGenerator(new SecureRandom());
  }
}
