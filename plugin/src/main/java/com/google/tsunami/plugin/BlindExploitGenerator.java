/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.tsunami.plugin;

import static com.google.common.base.Preconditions.checkNotNull;

import com.google.tsunami.plugin.payload.PayloadSecretGenerator;
import javax.inject.Inject;

/** A library for generating payloads for blind vulnerabilities such as SSRF, blind RCE */
public final class BlindExploitGenerator {

  private final TcsClient tcsClient;
  private final TcsConfigProperties configs;
  private final String secret;

  @Inject
  BlindExploitGenerator(
      TcsClient tcsClient, TcsConfigProperties configs, PayloadSecretGenerator secretGenerator) {
    this.tcsClient = checkNotNull(tcsClient);
    this.configs = checkNotNull(configs);
    //TODO(b/205184738): Move this magic number to configuration
    this.secret = secretGenerator.generate(8);
  }

  /**
   * Generates the payload.
   *
   * @return the payload that used for detecting blind vulnerabilities
   */
  public String generatePayload() {
    if (isTcsEnabled()) {
      return tcsClient.getCallbackUri(this.secret);
    } else {
      return "";
    }
  }

  /**
   * Checks whether the payload has been successfully exploited.
   *
   * @return the detection result.
   */
  public boolean isVulnerable() {
    if (isTcsEnabled()) {
      return tcsClient.hasOobLog(this.secret);
    } else {
      return false;
    }
  }

  /**
   * Checks whether the callback server is configured. Detectors should use this to determine if
   * they can use the callback server for detecting vulnerabilities
   *
   * @return whether the callback server is enabled
   */
  public boolean isTcsEnabled() {
    // only return false when all config fields are missing so that improper config (e.g., missing
    // certain fields) can be exposed
    return configs.callbackAddress != null
        && configs.callbackPort != null
        && configs.pollingUri != null;
  }
}
